// Mocks generated by Mockito 5.2.0 from annotations
// in search/test/helpers/test_helper.dart.
// Do not manually edit this file.

import 'dart:async' as _i9;
import 'dart:convert' as _i19;
import 'dart:typed_data' as _i20;

import 'package:core/core.dart' as _i10;
import 'package:dartz/dartz.dart' as _i2;
import 'package:data_connection_checker/data_connection_checker.dart' as _i5;
import 'package:http/src/base_request.dart' as _i18;
import 'package:http/src/client.dart' as _i21;
import 'package:http/src/io_client.dart' as _i17;
import 'package:http/src/io_streamed_response.dart' as _i6;
import 'package:http/src/response.dart' as _i7;
import 'package:http/src/streamed_response.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movie/domain/repositories/movie_repository.dart' as _i4;
import 'package:movie/movie.dart' as _i11;
import 'package:search/domain/usecases/search_movies.dart' as _i14;
import 'package:search/domain/usecases/search_tv_series.dart' as _i12;
import 'package:tv_series/domain/entities/episode.dart' as _i16;
import 'package:tv_series/domain/entities/tv_series.dart' as _i13;
import 'package:tv_series/domain/entities/tv_series_detail.dart' as _i15;
import 'package:tv_series/domain/repositories/tv_series_repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeTvSeriesRepository_1 extends _i1.Fake
    implements _i3.TvSeriesRepository {}

class _FakeMovieRepository_2 extends _i1.Fake implements _i4.MovieRepository {}

class _FakeDuration_3 extends _i1.Fake implements Duration {}

class _FakeAddressCheckResult_4 extends _i1.Fake
    implements _i5.AddressCheckResult {}

class _FakeIOStreamedResponse_5 extends _i1.Fake
    implements _i6.IOStreamedResponse {}

class _FakeResponse_6 extends _i1.Fake implements _i7.Response {}

class _FakeStreamedResponse_7 extends _i1.Fake implements _i8.StreamedResponse {
}

/// A class which mocks [MovieRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRepository extends _i1.Mock implements _i4.MovieRepository {
  MockMovieRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i2.Either<_i10.Failure, List<_i11.Movie>>>
      getNowPlayingMovies() => (super.noSuchMethod(
          Invocation.method(#getNowPlayingMovies, []),
          returnValue: Future<_i2.Either<_i10.Failure, List<_i11.Movie>>>.value(
              _FakeEither_0<_i10.Failure, List<_i11.Movie>>())) as _i9
          .Future<_i2.Either<_i10.Failure, List<_i11.Movie>>>);
  @override
  _i9.Future<_i2.Either<_i10.Failure, List<_i11.Movie>>> getPopularMovies() =>
      (super.noSuchMethod(Invocation.method(#getPopularMovies, []),
          returnValue: Future<_i2.Either<_i10.Failure, List<_i11.Movie>>>.value(
              _FakeEither_0<_i10.Failure, List<_i11.Movie>>())) as _i9
          .Future<_i2.Either<_i10.Failure, List<_i11.Movie>>>);
  @override
  _i9.Future<_i2.Either<_i10.Failure, List<_i11.Movie>>> getTopRatedMovies() =>
      (super.noSuchMethod(Invocation.method(#getTopRatedMovies, []),
          returnValue: Future<_i2.Either<_i10.Failure, List<_i11.Movie>>>.value(
              _FakeEither_0<_i10.Failure, List<_i11.Movie>>())) as _i9
          .Future<_i2.Either<_i10.Failure, List<_i11.Movie>>>);
  @override
  _i9.Future<_i2.Either<_i10.Failure, _i11.MovieDetail>> getMovieDetail(
          int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieDetail, [id]),
          returnValue: Future<_i2.Either<_i10.Failure, _i11.MovieDetail>>.value(
              _FakeEither_0<_i10.Failure, _i11.MovieDetail>())) as _i9
          .Future<_i2.Either<_i10.Failure, _i11.MovieDetail>>);
  @override
  _i9.Future<_i2.Either<_i10.Failure, List<_i11.Movie>>>
      getMovieRecommendations(int? id) => (super.noSuchMethod(
          Invocation.method(#getMovieRecommendations, [id]),
          returnValue: Future<_i2.Either<_i10.Failure, List<_i11.Movie>>>.value(
              _FakeEither_0<_i10.Failure, List<_i11.Movie>>())) as _i9
          .Future<_i2.Either<_i10.Failure, List<_i11.Movie>>>);
  @override
  _i9.Future<_i2.Either<_i10.Failure, List<_i11.Movie>>> searchMovies(
          String? query) =>
      (super.noSuchMethod(Invocation.method(#searchMovies, [query]),
          returnValue: Future<_i2.Either<_i10.Failure, List<_i11.Movie>>>.value(
              _FakeEither_0<_i10.Failure, List<_i11.Movie>>())) as _i9
          .Future<_i2.Either<_i10.Failure, List<_i11.Movie>>>);
  @override
  _i9.Future<_i2.Either<_i10.Failure, String>> saveWatchlist(
          _i11.MovieDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#saveWatchlist, [movie]),
              returnValue: Future<_i2.Either<_i10.Failure, String>>.value(
                  _FakeEither_0<_i10.Failure, String>()))
          as _i9.Future<_i2.Either<_i10.Failure, String>>);
  @override
  _i9.Future<_i2.Either<_i10.Failure, String>> removeWatchlist(
          _i11.MovieDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlist, [movie]),
              returnValue: Future<_i2.Either<_i10.Failure, String>>.value(
                  _FakeEither_0<_i10.Failure, String>()))
          as _i9.Future<_i2.Either<_i10.Failure, String>>);
  @override
  _i9.Future<bool> isAddedToWatchlist(int? id) =>
      (super.noSuchMethod(Invocation.method(#isAddedToWatchlist, [id]),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<_i2.Either<_i10.Failure, List<_i11.Movie>>> getWatchlistMovies() =>
      (super.noSuchMethod(Invocation.method(#getWatchlistMovies, []),
          returnValue: Future<_i2.Either<_i10.Failure, List<_i11.Movie>>>.value(
              _FakeEither_0<_i10.Failure, List<_i11.Movie>>())) as _i9
          .Future<_i2.Either<_i10.Failure, List<_i11.Movie>>>);
}

/// A class which mocks [SearchTvSeries].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchTvSeries extends _i1.Mock implements _i12.SearchTvSeries {
  MockSearchTvSeries() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.TvSeriesRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeTvSeriesRepository_1()) as _i3.TvSeriesRepository);
  @override
  _i9.Future<_i2.Either<_i10.Failure, List<_i13.TvSeries>>> execute(
          String? query) =>
      (super.noSuchMethod(Invocation.method(#execute, [query]),
              returnValue:
                  Future<_i2.Either<_i10.Failure, List<_i13.TvSeries>>>.value(
                      _FakeEither_0<_i10.Failure, List<_i13.TvSeries>>()))
          as _i9.Future<_i2.Either<_i10.Failure, List<_i13.TvSeries>>>);
}

/// A class which mocks [SearchMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchMovies extends _i1.Mock implements _i14.SearchMovies {
  MockSearchMovies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMovieRepository_2()) as _i4.MovieRepository);
  @override
  _i9.Future<_i2.Either<_i10.Failure, List<_i11.Movie>>> execute(
          String? query) =>
      (super.noSuchMethod(Invocation.method(#execute, [query]),
          returnValue: Future<_i2.Either<_i10.Failure, List<_i11.Movie>>>.value(
              _FakeEither_0<_i10.Failure, List<_i11.Movie>>())) as _i9
          .Future<_i2.Either<_i10.Failure, List<_i11.Movie>>>);
}

/// A class which mocks [TvSeriesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvSeriesRepository extends _i1.Mock
    implements _i3.TvSeriesRepository {
  MockTvSeriesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i2.Either<_i10.Failure, List<_i13.TvSeries>>>
      getOnAirTvSeries() => (super.noSuchMethod(
              Invocation.method(#getOnAirTvSeries, []),
              returnValue:
                  Future<_i2.Either<_i10.Failure, List<_i13.TvSeries>>>.value(
                      _FakeEither_0<_i10.Failure, List<_i13.TvSeries>>()))
          as _i9.Future<_i2.Either<_i10.Failure, List<_i13.TvSeries>>>);
  @override
  _i9.Future<_i2.Either<_i10.Failure, List<_i13.TvSeries>>>
      getPopularTvSeries() => (super.noSuchMethod(
              Invocation.method(#getPopularTvSeries, []),
              returnValue:
                  Future<_i2.Either<_i10.Failure, List<_i13.TvSeries>>>.value(
                      _FakeEither_0<_i10.Failure, List<_i13.TvSeries>>()))
          as _i9.Future<_i2.Either<_i10.Failure, List<_i13.TvSeries>>>);
  @override
  _i9.Future<_i2.Either<_i10.Failure, List<_i13.TvSeries>>>
      getTopRatedTvSeries() => (super.noSuchMethod(
              Invocation.method(#getTopRatedTvSeries, []),
              returnValue:
                  Future<_i2.Either<_i10.Failure, List<_i13.TvSeries>>>.value(
                      _FakeEither_0<_i10.Failure, List<_i13.TvSeries>>()))
          as _i9.Future<_i2.Either<_i10.Failure, List<_i13.TvSeries>>>);
  @override
  _i9.Future<_i2.Either<_i10.Failure, _i15.TvSeriesDetail>> getTvSeriesDetail(
          int? id) =>
      (super.noSuchMethod(Invocation.method(#getTvSeriesDetail, [id]),
              returnValue:
                  Future<_i2.Either<_i10.Failure, _i15.TvSeriesDetail>>.value(
                      _FakeEither_0<_i10.Failure, _i15.TvSeriesDetail>()))
          as _i9.Future<_i2.Either<_i10.Failure, _i15.TvSeriesDetail>>);
  @override
  _i9.Future<_i2.Either<_i10.Failure, List<_i13.TvSeries>>>
      getTvSeriesRecommendation(int? id) => (super.noSuchMethod(
              Invocation.method(#getTvSeriesRecommendation, [id]),
              returnValue:
                  Future<_i2.Either<_i10.Failure, List<_i13.TvSeries>>>.value(
                      _FakeEither_0<_i10.Failure, List<_i13.TvSeries>>()))
          as _i9.Future<_i2.Either<_i10.Failure, List<_i13.TvSeries>>>);
  @override
  _i9.Future<_i2.Either<_i10.Failure, List<_i13.TvSeries>>> searchTvSeries(
          String? query) =>
      (super.noSuchMethod(Invocation.method(#searchTvSeries, [query]),
              returnValue:
                  Future<_i2.Either<_i10.Failure, List<_i13.TvSeries>>>.value(
                      _FakeEither_0<_i10.Failure, List<_i13.TvSeries>>()))
          as _i9.Future<_i2.Either<_i10.Failure, List<_i13.TvSeries>>>);
  @override
  _i9.Future<_i2.Either<_i10.Failure, List<_i16.Episode>>> getTvEpisode(
          int? id, int? seasonNumber) =>
      (super.noSuchMethod(Invocation.method(#getTvEpisode, [id, seasonNumber]),
              returnValue:
                  Future<_i2.Either<_i10.Failure, List<_i16.Episode>>>.value(
                      _FakeEither_0<_i10.Failure, List<_i16.Episode>>()))
          as _i9.Future<_i2.Either<_i10.Failure, List<_i16.Episode>>>);
  @override
  _i9.Future<_i2.Either<_i10.Failure, String>> saveWatchlist(
          _i15.TvSeriesDetail? tvSeries) =>
      (super.noSuchMethod(Invocation.method(#saveWatchlist, [tvSeries]),
              returnValue: Future<_i2.Either<_i10.Failure, String>>.value(
                  _FakeEither_0<_i10.Failure, String>()))
          as _i9.Future<_i2.Either<_i10.Failure, String>>);
  @override
  _i9.Future<_i2.Either<_i10.Failure, String>> removeWatchlist(
          _i15.TvSeriesDetail? tvSeries) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlist, [tvSeries]),
              returnValue: Future<_i2.Either<_i10.Failure, String>>.value(
                  _FakeEither_0<_i10.Failure, String>()))
          as _i9.Future<_i2.Either<_i10.Failure, String>>);
  @override
  _i9.Future<bool> isAddedToWatchlist(int? id) =>
      (super.noSuchMethod(Invocation.method(#isAddedToWatchlist, [id]),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<_i2.Either<_i10.Failure, List<_i13.TvSeries>>>
      getWatchlistTvSeries() => (super.noSuchMethod(
              Invocation.method(#getWatchlistTvSeries, []),
              returnValue:
                  Future<_i2.Either<_i10.Failure, List<_i13.TvSeries>>>.value(
                      _FakeEither_0<_i10.Failure, List<_i13.TvSeries>>()))
          as _i9.Future<_i2.Either<_i10.Failure, List<_i13.TvSeries>>>);
}

/// A class which mocks [DataConnectionChecker].
///
/// See the documentation for Mockito's code generation for more information.
class MockDataConnectionChecker extends _i1.Mock
    implements _i5.DataConnectionChecker {
  MockDataConnectionChecker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i5.AddressCheckOptions> get addresses =>
      (super.noSuchMethod(Invocation.getter(#addresses),
              returnValue: <_i5.AddressCheckOptions>[])
          as List<_i5.AddressCheckOptions>);
  @override
  set addresses(List<_i5.AddressCheckOptions>? _addresses) =>
      super.noSuchMethod(Invocation.setter(#addresses, _addresses),
          returnValueForMissingStub: null);
  @override
  Duration get checkInterval =>
      (super.noSuchMethod(Invocation.getter(#checkInterval),
          returnValue: _FakeDuration_3()) as Duration);
  @override
  set checkInterval(Duration? _checkInterval) =>
      super.noSuchMethod(Invocation.setter(#checkInterval, _checkInterval),
          returnValueForMissingStub: null);
  @override
  List<_i5.AddressCheckResult> get lastTryResults => (super.noSuchMethod(
      Invocation.getter(#lastTryResults),
      returnValue: <_i5.AddressCheckResult>[]) as List<_i5.AddressCheckResult>);
  @override
  _i9.Future<bool> get hasConnection =>
      (super.noSuchMethod(Invocation.getter(#hasConnection),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<_i5.DataConnectionStatus> get connectionStatus =>
      (super.noSuchMethod(Invocation.getter(#connectionStatus),
              returnValue: Future<_i5.DataConnectionStatus>.value(
                  _i5.DataConnectionStatus.disconnected))
          as _i9.Future<_i5.DataConnectionStatus>);
  @override
  _i9.Stream<_i5.DataConnectionStatus> get onStatusChange =>
      (super.noSuchMethod(Invocation.getter(#onStatusChange),
              returnValue: Stream<_i5.DataConnectionStatus>.empty())
          as _i9.Stream<_i5.DataConnectionStatus>);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  bool get isActivelyChecking =>
      (super.noSuchMethod(Invocation.getter(#isActivelyChecking),
          returnValue: false) as bool);
  @override
  _i9.Future<_i5.AddressCheckResult> isHostReachable(
          _i5.AddressCheckOptions? options) =>
      (super.noSuchMethod(Invocation.method(#isHostReachable, [options]),
              returnValue: Future<_i5.AddressCheckResult>.value(
                  _FakeAddressCheckResult_4()))
          as _i9.Future<_i5.AddressCheckResult>);
}

/// A class which mocks [IOClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockIOClient extends _i1.Mock implements _i17.IOClient {
  MockIOClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i6.IOStreamedResponse> send(_i18.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue: Future<_i6.IOStreamedResponse>.value(
                  _FakeIOStreamedResponse_5()))
          as _i9.Future<_i6.IOStreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
  @override
  _i9.Future<_i7.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<_i7.Response>.value(_FakeResponse_6()))
          as _i9.Future<_i7.Response>);
  @override
  _i9.Future<_i7.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i7.Response>.value(_FakeResponse_6()))
          as _i9.Future<_i7.Response>);
  @override
  _i9.Future<_i7.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i19.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i7.Response>.value(_FakeResponse_6()))
          as _i9.Future<_i7.Response>);
  @override
  _i9.Future<_i7.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i19.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i7.Response>.value(_FakeResponse_6()))
          as _i9.Future<_i7.Response>);
  @override
  _i9.Future<_i7.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i19.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i7.Response>.value(_FakeResponse_6()))
          as _i9.Future<_i7.Response>);
  @override
  _i9.Future<_i7.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i19.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i7.Response>.value(_FakeResponse_6()))
          as _i9.Future<_i7.Response>);
  @override
  _i9.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i9.Future<String>);
  @override
  _i9.Future<_i20.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<_i20.Uint8List>.value(_i20.Uint8List(0)))
          as _i9.Future<_i20.Uint8List>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i21.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i7.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<_i7.Response>.value(_FakeResponse_6()))
          as _i9.Future<_i7.Response>);
  @override
  _i9.Future<_i7.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i7.Response>.value(_FakeResponse_6()))
          as _i9.Future<_i7.Response>);
  @override
  _i9.Future<_i7.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i19.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i7.Response>.value(_FakeResponse_6()))
          as _i9.Future<_i7.Response>);
  @override
  _i9.Future<_i7.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i19.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i7.Response>.value(_FakeResponse_6()))
          as _i9.Future<_i7.Response>);
  @override
  _i9.Future<_i7.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i19.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i7.Response>.value(_FakeResponse_6()))
          as _i9.Future<_i7.Response>);
  @override
  _i9.Future<_i7.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i19.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i7.Response>.value(_FakeResponse_6()))
          as _i9.Future<_i7.Response>);
  @override
  _i9.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i9.Future<String>);
  @override
  _i9.Future<_i20.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<_i20.Uint8List>.value(_i20.Uint8List(0)))
          as _i9.Future<_i20.Uint8List>);
  @override
  _i9.Future<_i8.StreamedResponse> send(_i18.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue:
                  Future<_i8.StreamedResponse>.value(_FakeStreamedResponse_7()))
          as _i9.Future<_i8.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
}
